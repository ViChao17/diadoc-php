syntax="proto3";
///////////////////////////////////////////////////////////////////////////////
// Протобуферы для читающих методов API:
//	GetEvent(string boxId, Guid eventId) : BoxEvent
//	GetNewEvents(string boxId, Guid afterEventId) : BoxEventList
//	GetMessage(string boxId, Guid messageId) : Message

import "Content.proto";
import "Documents/Document.proto";
import "Events/ResolutionInfo.proto";
import "Events/ResolutionRequestInfo.proto";
import "Events/ResolutionRequestDenialInfo.proto";

package Diadoc.Proto.Events;

message BoxEventList {
	repeated BoxEvent Events = 1;
	 int32 TotalCount = 2;
}

message BoxEvent {
	 string EventId = 1;
	 Message Message = 2;
	 MessagePatch Patch = 3;
}

message Message {
	 string MessageId = 1;
	 sfixed64 TimestampTicks = 2;			// DateTime.Ticks in UTC
	 sfixed64 LastPatchTimestampTicks = 3;	// DateTime.Ticks in UTC
	 string FromBoxId = 4;
	 string FromTitle = 5;
	 string ToBoxId = 6;
	 string ToTitle = 7;
	repeated Entity Entities = 8;
	 bool IsDraft = 9;
	 bool DraftIsLocked = 10;
	 bool DraftIsRecycled = 11;
	 string CreatedFromDraftId = 12;
	repeated string DraftIsTransformedToMessageIdList = 13;
	 bool IsDeleted = 14;
	 bool IsTest = 15;
	 bool IsInternal = 16;
	 bool IsProxified = 17;
	 string ProxyBoxId = 18;
	 string ProxyTitle = 19;
	 bool PacketIsLocked = 20;
}

message MessagePatch {
	 string MessageId = 1;
	 sfixed64 TimestampTicks = 2;	// DateTime.Ticks in UTC
	repeated Entity Entities = 3;
	 bool ForDraft = 4;
	 bool DraftIsRecycled = 5;
	repeated string DraftIsTransformedToMessageIdList = 6;
	 bool DraftIsLocked = 7;
	 bool MessageIsDeleted = 8;
	repeated EntityPatch EntityPatches = 9;
	 bool MessageIsRestored = 10;
	 bool MessageIsDelivered = 11;
	 string DeliveredPatchId = 12;
	 string PatchId = 13;
}

message Entity {
	 EntityType EntityType = 1;
	 string EntityId = 2;
	 string ParentEntityId = 3;
	 Content Content = 4;											// null <=> there is no content for this entity (very unlikely to happen)
	 AttachmentType AttachmentType = 5;	// only for EntityType.Attachment
	 string FileName = 6;											// only for EntityType.Attachment
	 bool NeedRecipientSignature = 7;				// only for EntityType.Attachment
	 string SignerBoxId = 8;										// only for EntityType.Signature
	 string NotDeliveredEventId = 10;								// only for Attachment/DeliveryFailureNotification
	 Documents.Document DocumentInfo = 11;							// only for EntityType.Attachment
	 sfixed64 RawCreationDate = 12;
	 ResolutionInfo ResolutionInfo = 13;
	 string SignerDepartmentId = 14;								// only for EntityType.Signature
	 ResolutionRequestInfo ResolutionRequestInfo = 15;
	 ResolutionRequestDenialInfo ResolutionRequestDenialInfo = 16;
	 bool NeedReceipt = 17;						// only for EntityType.Attachment
	 string PacketId = 18;
	 bool IsApprovementSignature = 19;			// only for EntityType.Signature
	 bool IsEncryptedContent = 20;
}

message EntityPatch {
	 string EntityId = 1;
	 bool DocumentIsDeleted = 2;
	 string MovedToDepartment = 3;
	 bool DocumentIsRestored = 4;
	 bool ContentIsPatched = 5;
	 string ForwardedToBoxId = 6;
}

enum EntityType {
	UnknownEntityType = 0;	// Reserved type to report to legacy clients for newly introduced entity types
	Attachment = 1;
	Signature = 2;
	//Неизвестные типы должны обрабатываться клиентом как cущность Attachment с типом вложения AttachmentType.Nonformalized
}

enum AttachmentType {
	Nonformalized = 0;
	UnknownAttachmentType = -1; // Reserved attachment type to report to legacy clients for newly introduced attachment types
	Invoice = 1;
	InvoiceReceipt = 2;
	InvoiceConfirmation = 3;
	InvoiceCorrectionRequest = 4;
	AttachmentComment = 5;
	DeliveryFailureNotification = 6;
	EancomInvoic = 7;
	SignatureRequestRejection = 8;
	EcrCatConformanceCertificateMetadata = 9;
	SignatureVerificationReport = 10;
	TrustConnectionRequest = 11;
	Torg12 = 12;
	InvoiceRevision = 13;
	InvoiceCorrection = 14;
	InvoiceCorrectionRevision = 15;
	AcceptanceCertificate = 16;
	StructuredData = 17;
	ProformaInvoice = 18;
	XmlTorg12 = 19;
	XmlAcceptanceCertificate = 20;
	XmlTorg12BuyerTitle = 21;
	XmlAcceptanceCertificateBuyerTitle = 22;
	Resolution = 23;
	ResolutionRequest = 24;
	ResolutionRequestDenial = 25;
	PriceList = 26;
	Receipt = 27;
	XmlSignatureRejection = 28;
	RevocationRequest = 29;
	PriceListAgreement = 30;
	CertificateRegistry = 34;
	ReconciliationAct = 35;
	Contract = 36;
	Torg13 = 37;
	ServiceDetails = 38;
	RoamingNotification = 39;
	SupplementaryAgreement = 40;
	UniversalTransferDocument = 41;
	UniversalTransferDocumentBuyerTitle = 42;
	UniversalTransferDocumentRevision = 45;
	CustomData = 64;
	MoveDocument = 65;
	ResolutionChainAssignmentAttachment = 66;
	//Неизвестные типы должны обрабатываться как Nonformalized
}